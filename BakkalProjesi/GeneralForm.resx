<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABLYlMAS2JTAUxbTwVMWk8GTFpPBkxaTwZMWk8GTFpPBkxa
        TwZMWk8GTFpPBkxaTwZMWk8GTFpPBkxaTwZMWk8GTFpPBkxaTwZMWk8GTFpPBkxaTwZMWk8GTFpPBkxa
        TwZMWk8GTFtPBUtiUwFLYlMAAAAAAAAAAAAAAAAAAAAAAExRPABMUT0hTz4apk87ErtNORC6SzcPuks3
        D7pLNw+6SzcPuks3D7pLNw+6TDcPuk86EbpPOhG6TzoRuk86EbpPOhG6TzoRuk86EbpPOhG6TzoRuk86
        EbpPOhG6TzoRuk86ErtPPhqmTFE9IUxRPAAAAAAAAAAAAAAAAAAAAAAATEw2AE1MNTBPNQjmTUYo/2Rk
        T/+Nf2X/joBm/46AZv+OgGb/joBm/4+AZv+FemH/VVpG/0tUQf9MVEH/TFRB/0xUQf9MVEH/TFRB/0xU
        Qf9MVEH/TFRB/0xUQf9MVUL/Tkcp/081COZNTDUwTEw2AAAAAAAAAAAAAAAAAAAAAABNTDYATUs0ME83
        C+ZGa27/h7rR//n8/v/8/v///P7///z+///8/v///f///+Pv9P9en73/Qo+x/0SQsv9EkLL/RJCy/0SQ
        sv9EkLL/RJCy/0SQsv9EkLL/RJCy/0SRtf9IbG//TzcL5k1LNDBNTDYAAAAAAAAAAAAAAAAAAAAAAE1M
        NgBNSzQwTzcL5kZscP+Iu9P//P3+////////////////////////////5fD1/16gv/9CkLT/RJK2/0SS
        t/9Ekrf/RJK3/0SSt/9Ekrf/RJK3/0SSt/9Ekrf/RJO5/0htcf9PNwvmTUs0ME1MNgAAAAAAAAAAAAAA
        AAAAAAAATUw2AE1LNDBPNwvmRmxw/4i70//09PP/5eHa///+/v/////////////////l8PX/XqC//0KQ
        tf9FjKz/RoOa/0aCmP9Ggpj/RoKY/0aCmP9Ggpj/RoKY/0aDmv9Fjq//SG1y/083C+ZNSzQwTUw2AAAA
        AAAAAAAAAAAAAAAAAABNTDYATUs0ME83C+ZGbHD/ibzV/+Hd1v+nmH///v39/////////////////+Xw
        9f9eoL//QpG2/0hzfP9LVkX/SmBa/0pgWf9KYFn/SmBZ/0pgWf9KYFr/S1ZF/0d1f/9IbnP/TzcL5k1L
        NDBNTDYAAAAAAAAAAAAAAAAAAAAAAE1MNgBNSzQwTzcL5kZscP+Ju9T/7Ovn/8zDtP/+/v7/////////
        ////////5fD1/16gv/9Ckbf/SW5z/0hwd/9Ekrf/RJC0/0SQtP9EkLT/RJC0/0SSt/9IcHj/SG91/0hu
        dP9PNwvmTUs0ME1MNgAAAAAAAAAAAAAAAAAAAAAATUw2AE1LNDBPNwvmRmxw/4i70//8/f7/////////
        ///////////////////l8PX/XqC//0KRt/9JbnP/SHF4/0STuP9EkbX/RJG1/0SRtf9EkbX/RJO4/0hx
        ef9IcHb/SG50/083C+ZNSzQwTUw2AAAAAAAAAAAAAAAAAAAAAABNTDYATUs0ME83C+ZGbHD/iLvT//z9
        /v///////////////////////////+Xw9f9eoL//QpG3/0luc/9IcXj/RJO4/0SRtf9EkbX/RJG1/0SR
        tf9Ek7j/SHF5/0hwdv9IbnT/TzcL5k1LNDBNTDYAAAAAAAAAAAAAAAAAAAAAAE1MNgBNSzQwTzcL5kZs
        cP+Iu9P//P3+////////////////////////////5fD1/16gv/9Ckbf/SW5z/0hxeP9Ek7j/RJG1/0SR
        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
        tf9EkbT/RJG0/0SRtN1Ej7MhRI+zAAAAAAAAAAAAAAAAAAAAAABDkLQAQ5G1IkSRtd1KXlX/TzYK/0hv
        dv9NRyr/TkYp/0hvdP9POAz/Sl1U/0SRtf9EkbX/RJG1/0SRtf9EkbX/RJG1/0SRtf9EkbX/RJG1/0SR
        tf9EkbX/RJG1/0SRtf9EkbX/RJG13UOQtCJDkLQAAAAAAAAAAAAAAAAAAAAAAEOQtABDkLQhRJG23EWF
        n/9Hd4T/RIyr/0d9j/9GfZD/RIyr/0d3g/9GhZ//RJG2/0SRtf9EkbX/RJG1/0SRtf9EkbX/RJG1/0SR
        tf9EkbX/RJG1/0SRtf9EkbX/RJG1/0SRtf9EkbXcQ5C0IUOQtAAAAAAAAAAAAAAAAAAAAAAAQ5G1AEOR
        tQ1EkbWCRJK3qESTuaZEkbamRJK4pkSSuKZEkbamRJK5pkSSt6ZEkbWmRJG1pkSRtaZEkbWmRJG1pkSR
        taZEkbWmRJG1pkSRtaZEkbWmRJG1pkSRtaZEkbWmRJG1qESRtYFEkbUNRJG1AAAAAAAAAAAAAAAAAAAA
        AAA8ibUAI221AEGPtQJEj7UDRI+1A0SPtQNEj7UDRI+1A0SPtQNEj7UDRI+1A0SPtQNEj7UDRI+1A0SP
        tQNEj7UDRI+1A0SPtQNEj7UDRI+1A0SPtQNEj7UDRI+1A0SPtQNEj7UDQZOzAh6/igA7mqwAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////gAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AAfgAAAH4AAAB+AAAAfgAAAH4AAAB8AAAAOAAAABgAAAAYAAAAHAAAADwAAAA8AAAAPgAAAH4AAAB+AA
        AAfgAAAH4AAAB+AAAAfwAAAP//////////8=
</value>
  </data>
</root>